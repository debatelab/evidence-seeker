# `config_version` is used internally to indicate and check 
# whether a config is compatible with the (current) code.
# (Currently hardset in `workflow.py`.)
config_version: 'v0.1'
used_model_key: model_1
description: |
  Erste Version einer Konfiguration für die EvidenceSeeker Boilerplate.
pipeline:
  system_prompt: &default_sp |
    You are a helpful assistant with outstanding expertise in critical thinking and logico-semantic analysis. You have a background in philosophy, and have practical experience in fact checking and debate analysis.
    You read instructions carefully and follow them precisely. You give concise and clear answers.
  simple_preprocessing:
    timeout: 60
    verbose: False
    workflow_events:
      ascriptive_analysis_event:
        name: 'Ascriptive analysis'
        description: |
          Instruct the assistant to carry out free-text analysis of ascriptions.
        prompt_template: |
          The following claim has been submitted for fact-checking.
          <claim>{claim}</claim>
          Before we proceed with retrieving evidence items, we carefully analyse the claim. Your task is to contribute to this preparatory analysis, as detailed below.
          In particular, you should thoroughly discuss whether the claim makes any explicit ascriptions, that is, whether it explicitly ascribes a statement to a person or an organisation (e.g., as something the person has said, believes, acts on etc.) rather than plainly asserting that statement straightaway.
          If so, clarify which statements are ascribed to whom exactly and in which ways.
          In doing so, watch out for ambiguity and vagueness in the claim. Make alternative interpretations explicit.
          End your analysis with a short list including all identified ascriptions. Formulate each ascription as a concise statement, such that it is transparent to whom it is attributed.
        system_prompt: *default_sp
      descriptive_analysis_event:
        name: 'Descriptive analysis'
        description: |
          Instruct the assistant to carry out free-text analysis of factual content.
        prompt_template: |
          The following claim has been submitted for fact-checking.
          <claim>{claim}</claim>
          Before we proceed with retrieving evidence items, we carefully analyse the claim. Your task is to contribute to this preparatory analysis, as detailed below.
          In particular, you should thoroughly discuss whether the claim contains or implies factual or descriptive statements, which can be verified or falsified by empirical observation or through scientific analysis, and which may include, for example, descriptive reports, historical facts, or scientific claims.
          If so, try to identify them and render them in your own words.
          In doing so, watch out for ambiguity and vagueness in the claim. Make alternative interpretations explicit.
          End your analysis with a short list of all identified factual or descriptive statements. Formulate each statement in a concise manner and such that its factual nature stands out clearly.
        system_prompt: *default_sp
      list_claims_event:
        name: 'Statements list'
        description: 'List all factual and ascriptive statements based on all free-text analyses.'
        prompt_template: |
          The following claim has been submitted for analysing its descriptive, normative and ascriptive content.
          <claim>{claim}</claim>
          The analysis yielded the following results:
          <results of descripitve analysis>
          {descriptive_analysis_event}
          </results of descriptive analysis>
          <results of ascripitve analysis>
          {ascriptive_analysis_event}
          </results of ascriptive analysis>
          <results of normative analysis>
          {normative_analysis_event}
          </results of normative analysis>
          Building on this analysis, I want you to to identify the factual, and the ascriptive content of the claim. In particular, you should  
          1. List all factual or descriptive statements, which can be verified or falsified by empirical observation or scientific analysis, contained in the claim;
          2. List all ascriptions, that is, statements ascribed to a person or organisation, contained in the claim.
          Format your output as a JSON object according to the following schema:
          <json-schema>
          {json_schema}
          </json-schema>
          Do not include any other text than the JSON object.
          Omit any markdown formatting. Do not include any preamble or explanation.
        system_prompt: *default_sp
      normative_analysis_event:
        name: 'Normative Analysis'
        description: |
          Instruct the assistant to carry out free-text analysis of normative content.
        prompt_template: |
          The following claim has been submitted for fact-checking.
          <claim>{claim}</claim>
          Before we proceed with retrieving evidence items, we carefully analyse the claim. Your task is to contribute to this preparatory analysis, as detailed below.
          In particular, you should thoroughly discuss whether the claim contains or implies normative statements, such as value judgements, recommendations, or evaluations. However, avoid reading normative content into the claim without textual evidence.
          If so, try to identify them and render them in your own words.
          In doing so, watch out for ambiguity and vagueness in the claim. Make alternative interpretations explicit.
          End your analysis with a short list of all identified normative statements. Formulate each statement in a concise manner and such that its normative nature stands out clearly.
        system_prompt: *default_sp
      negate_claim_event:
        name: 'Negate statement'
        description: 'Instruct assistant to negate a claim.'
        system_prompt: *default_sp
        prompt_template: |
          Your task is to express the opposite of the following statement in plain and unequivocal language. 
          Please generate a single sentence that clearly states the negation.
          <statement>
          {statement}
          </statement>
          Provide only the negated statement without any additional comments. 
models:
  model_1:
    name: "Llama-3.1-70B-Instruct"
    description: "NVIDEA NIM API (kostenpflichtig über DebateLab Account)"
    base_url: "https://huggingface.co/api/integrations/dgx/v1"
    model: "meta-llama/Llama-3.1-70B-Instruct"
    api_key_name: "kideku_toxicity_app_nim"
    backend_type: nim
    # TODO: pass values 
    max_tokens: 2048 # 2048
    temperature: 0.2
  model_2:
    name: "Mistral-7B-Instruct-v0.2"
    description: "HF inference API"
    base_url: "https://api-inference.huggingface.co/v1/"
    model: "mistralai/Mistral-7B-Instruct-v0.2"
    api_key_name: "HF_TOKEN_KIDEKU_INFERENCE"
    backend_type: openai
    # TODO: pass values 
    max_tokens: 1024
    temperature: 0.2
  model_3:
    name: "Llama-3.2-3B-Instruct"
    description: "HF dedicated endpoint (debatelab)"
    base_url: "https://dchi8b9swca6gxbe.eu-west-1.aws.endpoints.huggingface.cloud/v1/"
    model: "meta-llama/Llama-3.2-3B-Instruct"
    api_key_name: "token_debatelab_hf_endpoints"
    backend_type: tgi
    # TODO: pass values 
    max_tokens: 2048
    temperature: 0.2
  model_4:
    name: "Spätzle 8B"
    description: "Kriton@DebateLab"
    #base_url: "http://kriton.philosophie.kit.edu:8080/v1/chat/completions"
    base_url: "http://kriton.philosophie.kit.edu:8080/v1/"
    model: "tgi"
    api_key: "no-key-required"
    backend_type: tgi
    # TODO: pass values 
    max_tokens: 2048
    temperature: 0.2

